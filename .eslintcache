[{"C:\\Users\\Philipp Hassler\\IdeaProjects\\supertrumpf\\src\\index.js":"1","C:\\Users\\Philipp Hassler\\IdeaProjects\\supertrumpf\\src\\reportWebVitals.js":"2","C:\\Users\\Philipp Hassler\\IdeaProjects\\supertrumpf\\src\\App.js":"3","C:\\Users\\Philipp Hassler\\IdeaProjects\\supertrumpf\\src\\Card.jsx":"4","C:\\Users\\Philipp Hassler\\IdeaProjects\\supertrumpf\\src\\Animal.js":"5","C:\\Users\\Philipp Hassler\\IdeaProjects\\supertrumpf\\src\\Game.jsx":"6"},{"size":503,"mtime":1609939019147,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":499162500000,"results":"9","hashOfConfig":"8"},{"size":132,"mtime":1610042484849,"results":"10","hashOfConfig":"8"},{"size":1655,"mtime":1610062412327,"results":"11","hashOfConfig":"8"},{"size":603,"mtime":1609944571765,"results":"12","hashOfConfig":"8"},{"size":4466,"mtime":1610366426854,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"sn9cu5",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"28","usedDeprecatedRules":"16"},"C:\\Users\\Philipp Hassler\\IdeaProjects\\supertrumpf\\src\\index.js",[],["29","30"],"C:\\Users\\Philipp Hassler\\IdeaProjects\\supertrumpf\\src\\reportWebVitals.js",[],"C:\\Users\\Philipp Hassler\\IdeaProjects\\supertrumpf\\src\\App.js",[],"C:\\Users\\Philipp Hassler\\IdeaProjects\\supertrumpf\\src\\Card.jsx",[],["31","32"],"C:\\Users\\Philipp Hassler\\IdeaProjects\\supertrumpf\\src\\Animal.js",[],"C:\\Users\\Philipp Hassler\\IdeaProjects\\supertrumpf\\src\\Game.jsx",["33"],"import * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport update from 'immutability-helper';\r\n\r\nimport './Game.css';\r\nimport Card from './Card.jsx';\r\nimport Animal from './Animal.js';\r\n\r\nexport default class Game extends React.Component {\r\n    static defaultProps = {\r\n        title: 'Supertrumpf',\r\n    };\r\n    static propTypes = {\r\n        title: PropTypes.string,\r\n    }\r\n    state = {\r\n            computerUncovered: false,\r\n            selectedProperty: '',\r\n            playersTurn: true,\r\n            player: [],\r\n            computer: [],\r\n        };\r\n\r\n    async componentDidMount() {\r\n        const request = await fetch('http://localhost:3001/card');\r\n        const data = await request.json();\r\n        const computer = [];\r\n        const player = [];\r\n        data.forEach((card, index) => {\r\n            const animal = new Animal(card.name, card.image, card.size, card.weight, card.age, card.offspring, card.speed);\r\n            if(index % 2 === 0) {\r\n                computer.push(animal);\r\n            } else {\r\n                player.push(animal);\r\n            }\r\n        });\r\n        this.setState(state => update(state, {player: {$set: player}, computer: {$set: computer},}),);\r\n    }\r\n\r\n    getSelectPropertyHandler() {\r\n\r\n        return property => this.play(property);\r\n    }\r\n\r\n    compare(property) {\r\n        console.log(property);\r\n        let playersTurn = this.state.playersTurn;\r\n\r\n        const firstPlayer = this.state.player[0];\r\n        let player = update(this.state.player, { $splice: [[0, 1]] });\r\n\r\n        const firstComputer = this.state.computer[0];\r\n        let computer = update(this.state.computer, { $splice: [[0, 1]] });\r\n\r\n        if (firstPlayer[property]>firstComputer[property]){\r\n            playersTurn = true;\r\n            player = update(player, {$push: [firstPlayer, firstComputer] });\r\n            if(computer.length === 0){\r\n                alert('Player wins'); return;\r\n            }\r\n        } else if(firstPlayer[property] < firstComputer[property]) {\r\n            playersTurn = false;\r\n            computer = update(computer, { $push: [firstPlayer] });\r\n            if (player.length===0){\r\n                alert('Computer wins'); return;\r\n            }\r\n        } else {\r\n            player = update(player, { $push: [firstPlayer] });\r\n            computer = update(computer, { $push: [firstComputer] });\r\n        }\r\n        this.setState(\r\n            state =>\r\n                update(state, {\r\n                    $set: {\r\n                        computerUncovered: false,\r\n                        selectedProperty: '',\r\n                        playersTurn,\r\n                        player,\r\n                        computer,\r\n                    },\r\n                }),\r\n                () => {\r\n                if(!playersTurn){\r\n                    setTimeout(()=> {\r\n                        const property = this.selectRandomProperty();\r\n                        this.play(property);\r\n                    }, 2000);\r\n                }\r\n            },\r\n        );\r\n    }\r\n\r\n    play(property) {\r\n        this.setState(\r\n            state =>\r\n                update(this.state, {\r\n                    selectedProperty: { $set: property },\r\n                    computerUncovered: { $set: true },\r\n                }),\r\n            () => {\r\n                setTimeout(() => {\r\n                    this.compare(property);\r\n                }, 2000);\r\n            },\r\n        );\r\n    }\r\n\r\n    selectRandomProperty() {\r\n        const properties = Object.keys(Animal.properties);\r\n        const index = Math.floor(Math.random()* properties.length);\r\n        return properties[index];\r\n    }\r\n\r\n    render() {\r\n        const { playersTurn, player, computer, selectedProperty, computerUncovered } = this.state;\r\n        return(\r\n            <div>\r\n                <h1>{this.props.title}</h1>\r\n                <div className=\"info\">\r\n                    {playersTurn ? 'Du bist ' : 'Der Computer ist'} an der Reihe\r\n                </div>\r\n                <div className=\"cards\">\r\n                    {player[0] && (\r\n                    <Card animal={player[0]} uncovered={true} selectedProperty={selectedProperty} onSelectProperty={this.getSelectPropertyHandler()}/>)}\r\n                    {computer [0] && (\r\n                    <Card animal={computer[0]} uncovered={computerUncovered} selectedProperty={selectedProperty}/>)}\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}",{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"34","replacedBy":"38"},{"ruleId":"36","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":125,"column":22,"nodeType":"42","messageId":"43","endLine":125,"endColumn":34,"fix":"44"},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],["45"],["46"],"no-whitespace-before-property","Unexpected whitespace before property 0.","MemberExpression","unexpectedWhitespace",{"range":"47","text":"48"},"no-global-assign","no-unsafe-negation",[4273,4274],""]